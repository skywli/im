syntax = "proto2";
import "IM.Basic.proto";
package com.proto.server ;

enum NodeStatus {
	NODE_UNABLE = 0;
	NODE_CONNECT =1;
	NODE_REGIST =2;
	NODE_AUTH =3;
	NODE_ABLE=4;
	NODE_TIMEOUT=5;
};
message RegisterServerReq {
	optional string     server_ip = 1;
	optional int32      server_port = 2 ;
	optional int32      service_type = 3 ;
}

message RegisterServerRsp {
    optional int32 node_id = 1;
    optional int32 result_code = 2;
}

message ConfigInfo{
	optional int32      service_type = 1 ;
	optional string     passwd=2;
	optional string     server_ip = 3;
	optional int32      server_port = 4 ;
	optional bool       is_enable = 5;
}

message NodeState{
	optional int32      service_type = 1 ;
	optional int32      node_id = 2; 
	optional int32      state = 3;
}

message NodeInfo{
	optional int32      service_type = 1 ;
	optional int32      node_id = 2; 
	optional string     server_ip = 3;
	optional int32      server_port = 4 ;
	optional bool       is_enable = 5;
	optional int32      route_strategy  = 6;
	repeated string      user_list = 7;
    optional string     slots=10;
}

message ServiceInfo{
	optional int32      service_type = 1 ;
	repeated NodeInfo   node_info_list = 2;
}

message ServerInfoBroadcast{
	optional  int32        epoch       = 1;
	repeated  ServiceInfo   service_list = 2;
	repeated  ServiceInfo   config_list = 3;
}

message AuthenticationReq{
	optional int32      service_type = 1 ;
	optional int32      node_id = 2; 
}

message AuthenticationRsp{
	optional int32      service_type = 1 ;
	optional int32      node_id = 2; 
	optional int32      result_code = 3;
}


message PingReq{
	optional int32      service_type = 1 ;
	optional int32      node_id = 2; 
	optional int32      epoch = 3; 
	repeated NodeState  state_list=4;
}

message PongRsp{
	optional int32      service_type = 1 ;
	optional int32      node_id = 2; 
}

message RegisterCmdReq{
	optional int32      service_type = 1 ;
	optional int32      node_id = 2; 
	repeated com.proto.basic.COMMANDID cmd_list= 3;
}


//user client query
message ServerState{
	optional int32      service_type = 1 ;
	optional int32      node_id = 2; 
	optional int32      state = 3;
	repeated NodeState  conn_node_state_list=4;
	optional int32      route_stragry=5;
	repeated string      user_list=6;
	optional string     ip=7;
	optional  int32      port=8;
    optional string     slots_str=10;
}
message ServiceState{
	optional int32         service_type = 1 ;
	repeated ServerState   server_state_list = 2;
}
message ClusterState{
	repeated ServiceState cluster_state_list=1;
}

message ConfigSetReq{
	repeated string cmd=1;
}

message ConfigSetRsp{
	optional string reply=1;
}

